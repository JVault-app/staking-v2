#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global int   storage::total_supply;
global slice storage::staking_pool_address;
global int   storage::lock_period;
global cell  storage::jetton_content;
global cell  storage::stake_wallet_code;


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    storage::total_supply = ds~load_coins();
    storage::staking_pool_address = ds~load_msg_addr();
    storage::lock_period = ds~load_uint(32);
    storage::jetton_content = ds~load_dict();
    storage::stake_wallet_code = ds~load_ref();
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    force_same_workchain(sender_address);
    if (flags & 1) {  ;; bounced messages
        return ();
    }

    ;; update tvl
    int op = in_msg_body~load_uint(32);
    if (op == op::report_storage_data) {
        slice ds = get_data().begin_parse();
        ds~load_coins();
        slice staking_pool_address = ds~load_msg_addr();
        throw_unless(exc::incorrect_sender, equal_slices(staking_pool_address, sender_address));
        slice pool_data = in_msg_body~load_ref().begin_parse();
        pool_data = pool_data~load_ref().begin_parse();
        set_data(
            begin_cell()
               .store_coins(pool_data~load_coins())
               .store_slice(staking_pool_address)
               .store_slice(ds)
            .end_cell()
        );
    }
}


(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (storage::total_supply, -1, storage::staking_pool_address, storage::jetton_content, storage::stake_wallet_code);
}


slice get_wallet_address(slice owner_address) method_id {
    load_data();
    cell state_init = calculate_stake_wallet_state_init(storage::staking_pool_address, my_address(), owner_address, storage::lock_period, storage::stake_wallet_code);
    return get_address_by_state_init(state_init);
}
