#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";
#include "imports/gas.fc";


global int   storage::init?;                   ;; Int1. Is lock wallet address set?
global int   storage::pool_id;                 ;; Uint32. Unique index for each pool factory;
global slice storage::admin_address;           ;; MsgAddressStd. Address that will receive commissions;
global slice storage::creator_address;         ;; MsgAddressStd. Address of this staking pool creator
global slice storage::lock_wallet_address;     ;; MsgAddressStd. Address of jetton wallet for staking jetton
global cell  storage::nft_content;             ;; HashmapE. Nft content
global cell  storage::stake_wallet_code;       ;; Cell. Stake wallet code

global int   storage::tvl;                     ;; Coins. Current TVL
global int   storage::tvl_with_multipliers;    ;; Coins. Current TVL with multipliers taken into account
global int   storage::min_deposit;             ;; Coins. Min staking deposit
global int   storage::max_deposit;             ;; Coins. Max staking deposit

global cell  storage::reward_jettons;          ;; HashmapE. jetton_wallet_address (MsgAddressStd) -> distributed_rewards (uint256), HashmapE(index (uint32) -> distribution_speed (coins), start_time (uint32), end_time (uint32))
global int   storage::reward_jettons_count;    ;; Uint8. Current number of reward jettons
global int   storage::rewards_deposits_count;  ;; Uint8. Current number of active rewards deposits      

global cell  storage::lock_periods;            ;; HashmapE. lock_period (uint32) -> cur_tvl (Coins), tvl_limit (Coins), reward_multiplier (uint16), deposit_commission (uint16), unstake_commission (uint16), minter_address (MsgAddressStd)

global cell  storage::whitelist;               ;; HashmapE. user_address (MsgAddressStd) -> nothing (int1)

global int   storage::unstake_fee;             ;; Coins. Const JVault's TON fee
global int   storage::collected_commissions;   ;; Coins. Commissions collected from instant unstakes  

global int   storage::rewards_commission;      ;; Uint16. JVault's commission as percent of staking rewards. Commission rate = commission_factor / commission_divider.
global int   storage::version;                 ;; Uint16. Version of the staking pool code
      


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; Bits = 1 + 32 + 267 + 267 + 267 + 1 = 835. Refs = 3.
    storage::init?                 = ds~load_int(1);
    storage::pool_id               = ds~load_uint(32);
    storage::admin_address         = ds~load_msg_addr();
    storage::creator_address       = ds~load_msg_addr();
    storage::lock_wallet_address   = ds~load_msg_addr();
    storage::nft_content           = ds~load_maybe_ref();
    storage::stake_wallet_code     = ds~load_ref();

    slice ds2 = ds~load_ref().begin_parse();  ;; Bits = 124 + 124 + 124 + 124 + 1 + 8 + 8 + 1 + 1 + 124 + 124 + 16 + 16 = 795. Refs = 3.
    ds.end_parse();

    storage::tvl                    = ds2~load_coins();
    storage::tvl_with_multipliers   = ds2~load_coins();
    storage::min_deposit            = ds2~load_coins();
    storage::max_deposit            = ds2~load_coins();
    storage::reward_jettons         = ds2~load_dict();
    storage::reward_jettons_count   = ds2~load_uint(8);
    storage::rewards_deposits_count = ds2~load_uint(8);
    storage::lock_periods           = ds2~load_dict();
    storage::whitelist              = ds2~load_dict();
    storage::unstake_fee            = ds2~load_coins();
    storage::collected_commissions  = ds2~load_coins();
    storage::rewards_commission     = ds2~load_uint(16);
    storage::version                = ds2~load_uint(16);

    ds2.end_parse();
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_int(storage::init?, 1)
            .store_uint(storage::pool_id, 32)
            .store_slice(storage::admin_address)
            .store_slice(storage::creator_address)
            .store_slice(storage::lock_wallet_address)
            .store_maybe_ref(storage::nft_content)
            .store_ref(storage::stake_wallet_code)
            .store_ref(
                begin_cell()
                    .store_coins(storage::tvl)
                    .store_coins(storage::tvl_with_multipliers)
                    .store_coins(storage::min_deposit)
                    .store_coins(storage::max_deposit)
                    .store_dict(storage::reward_jettons)
                    .store_uint(storage::reward_jettons_count, 8)
                    .store_uint(storage::rewards_deposits_count, 8)
                    .store_dict(storage::lock_periods)
                    .store_dict(storage::whitelist)
                    .store_coins(storage::unstake_fee)
                    .store_coins(storage::collected_commissions)
                    .store_uint(storage::rewards_commission, 16)
                    .store_uint(storage::version, 16)
                .end_cell()
            )
        .end_cell()
    );
}


(int) get_distributed_rewards(int distribution_speed, int start_time, int time_now) inline {
    return (storage::tvl_with_multipliers ?
            muldiv(
                muldiv(distribution_speed, distributed_rewards_divider, distribution_speed_divider), 
                time_now - start_time,
                storage::tvl_with_multipliers
            ) : 0);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    msg_value -= storage_fees();

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    force_same_workchain(sender_address);

    load_data();

    if (flags & 1) {  ;; bounced messages
        in_msg_body~skip_bits(32);
        if (in_msg_body~load_uint(32) == op::provide_wallet_address) {
            raw_reserve(tons::min_reserve, 0);
            send_message_with_comment(storage::creator_address, 0, "Deploy successfull, you should set the jetton wallet address", mode::carry_remaining_balance);
        }
        return ();
    }

    int op       = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification) { 
        int   transferred_jettons = in_msg_body~load_coins();
        slice from_address        = in_msg_body~load_msg_addr();

        try {
            slice payload = in_msg_body~load_int(1) ? in_msg_body~load_ref().begin_parse() : in_msg_body;
            int inner_op = payload~load_uint(32);

            if (inner_op == op::stake_jettons) {
                int fwd_fee = get_forward_fee(WORKCHAIN, UPDATE_MSG_BITS, UPDATE_MSG_CELLS);
                throw_unless(exc::out_of_gas, msg_value >= stake_required_gas(fwd_fee));
                throw_unless(exc::not_inited, storage::init?);
                throw_unless(exc::incorrect_jetton, equal_slices(sender_address, storage::lock_wallet_address));
                ifnot (null?(storage::whitelist)) {
                    (_, int success) = storage::whitelist.dict_get?(267, from_address);
                    throw_unless(exc::incorrect_sender, success);
                }
                
                int lock_period = payload~load_uint(32);
                payload.end_parse();

                (slice period_info_slice, int success) = storage::lock_periods.udict_get?(32, lock_period);
                throw_unless(exc::incorrect_lock_period, success);
                int cur_tvl = period_info_slice~load_coins();
                (slice tmp, int tvl_limit) = period_info_slice.load_coins();
                tmp~skip_bits(16);
                int   deposit_commission = tmp~load_uint(16);
                int   unstake_commission = tmp~load_uint(16);
                slice minter_address     = tmp~load_msg_addr();
                
                int commission = muldiv(transferred_jettons, deposit_commission, commission_divider);
                throw_if(exc::less_than_min_deposit, transferred_jettons < storage::min_deposit);               ;; min deposit doesn't take into account deposit commission rate
                throw_if(exc::more_than_max_deposit, transferred_jettons - commission > storage::max_deposit);  ;; max deposit takes into account deposit commission rate

                cur_tvl += transferred_jettons - commission;
                throw_unless(exc::tvl_limit_exceeded, cur_tvl <= tvl_limit);
                
                storage::lock_periods~udict_set_builder(32, lock_period, begin_cell().store_coins(cur_tvl).store_slice(period_info_slice));

                cell stake_payload = begin_cell()
                                        .store_uint(op::receive_jettons, 32)
                                        .store_uint(query_id, 64)
                                        .store_coins(storage::min_deposit)
                                        .store_coins(storage::max_deposit)
                                        .store_uint(unstake_commission, 16)
                                        .store_coins(storage::unstake_fee)
                                        .store_dict(storage::whitelist)
                                        .store_coins(transferred_jettons - commission)
                                        .store_coins(commission)
                                    .end_cell();
                cell state_init = calculate_stake_wallet_state_init(my_address(), minter_address, from_address, lock_period, storage::stake_wallet_code);
                slice stake_wallet_address = get_address_by_state_init(state_init);
                send_deploy_message(stake_wallet_address, 0, state_init, stake_payload, mode::carry_remaining_gas);
                
                save_data();
                return ();
            } 

            elseif (inner_op == op::add_rewards) {
                int fwd_fee = get_original_fwd_fee(WORKCHAIN, cs~retrieve_fwd_fee());
                throw_unless(exc::out_of_gas, msg_value >= add_rewards_required_gas(fwd_fee));
                throw_unless(exc::incorrect_sender, equal_slices(from_address, storage::creator_address));
                (slice rewards_info_slice, int success) = storage::reward_jettons.dict_get?(267, sender_address);
                throw_unless(exc::incorrect_jetton, success);

                throw_unless(exc::hashmap_overflow, storage::rewards_deposits_count < REWARDS_DEPOSITS_MAX_COUNT);
                
                int rewards_to_add = muldiv(transferred_jettons, commission_divider, commission_divider + storage::rewards_commission);
                int commission = transferred_jettons - rewards_to_add;
                int start_time = payload~load_uint(32);
                int end_time = payload~load_uint(32);
                payload.end_parse();
                throw_unless(exc::incorrect_distribution_period, (now() <= start_time) & (start_time < end_time));
                int distribution_speed = muldiv(rewards_to_add, distribution_speed_divider, end_time - start_time);
                
                int distributed_rewards = rewards_info_slice~load_uint(256);
                cell rewards_deposits = rewards_info_slice~load_dict();
                (int max_index, _, int success) = rewards_deposits.udict_get_max?(32);
                max_index = success ? max_index + 1 : 0;
                rewards_deposits~udict_set_builder(32, max_index, begin_cell().store_coins(distribution_speed).store_uint(start_time, 32).store_uint(end_time, 32));

                storage::reward_jettons~dict_set_builder(267, sender_address, begin_cell().store_uint(distributed_rewards, 256).store_dict(rewards_deposits));
                throw_unless(exc::hashmap_overflow, cell_depth(rewards_deposits) <= MAX_DEPOSITS_CELL_DEPTH);
                storage::rewards_deposits_count += 1;

                send_jettons(query_id, commission, storage::admin_address, from_address, sender_address, 0, mode::carry_remaining_gas, 
                             1, begin_cell().store_uint(0, 32).store_slice("JVault's rewards commission").end_cell());
                
                save_data();
                return ();
            }

            throw(exc::unsupported_op);
        } catch (_, n) {
            send_jettons(query_id, transferred_jettons, from_address, from_address, sender_address, 0, mode::carry_remaining_gas,
                         1, begin_cell().store_uint(0, 32).store_slice("Error. Code ").store_number10(n).end_cell());  
            return ();
        }
    }

    if (op == op::add_reward_jettons) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
        
        cell wallets_dict = in_msg_body~load_dict();
        (slice reward_jetton, _, int success) = wallets_dict.dict_get_min?(267);
        while (success) {
            force_same_workchain(reward_jetton);
            if(storage::reward_jettons~dict_add_builder?(267, reward_jetton, begin_cell().store_int(0, 257))) {
                storage::reward_jettons_count += 1;
                throw_if(exc::hashmap_overflow, storage::reward_jettons_count > REWARD_JETTONS_MAX_COUNT);
            }
            (reward_jetton, _, success) = wallets_dict.dict_get_next?(267, reward_jetton);
        }
        
        (slice reward_jetton, slice rewards_info_slice, success) = storage::reward_jettons.dict_get_min?(267);
        int rewards_deposits_depth = 0; 
        while (success) {
            rewards_deposits_depth = max(slice_depth(rewards_info_slice), rewards_deposits_depth);
            (reward_jetton, rewards_info_slice, success) = storage::reward_jettons.dict_get_next?(267, reward_jetton);
        }
        int reward_jettons_depth = cell_depth(storage::reward_jettons) - rewards_deposits_depth;
        throw_unless(exc::hashmap_overflow, reward_jettons_depth <= MAX_REWARD_JETTONS_CELL_DEPTH);

        send_excess(storage::creator_address, query_id, 0, mode::carry_remaining_gas | mode::ignore_errors);
        save_data();
        return ();
    }

    if (op == op::claim_commissions) {
        int fwd_fee = get_original_fwd_fee(WORKCHAIN, cs~retrieve_fwd_fee());
        throw_unless(exc::out_of_gas, msg_value >= claim_commissions_required_gas(fwd_fee));
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));

        send_jettons(query_id, storage::collected_commissions, sender_address, sender_address, storage::lock_wallet_address, 0,
                     mode::carry_remaining_gas, 1, begin_cell().store_uint(0, 32).store_slice("Unstakes & deposits commissions claimed").end_cell());
        
        storage::collected_commissions = 0;        
        save_data();
        return ();
    }

    if (op == op::change_content) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::creator_address));
        storage::nft_content = in_msg_body~load_dict();
        save_data();
        return ();
    }

    if (op == op::take_wallet_address) {  ;; change jetton wallet address (used only once)
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::lock_wallet_address) |
                                            equal_slices(sender_address, storage::creator_address));
        throw_if(exc::already_inited, storage::init?);

        raw_reserve(tons::min_reserve, 0);
        send_message_with_comment(storage::creator_address, 0, "Deploy successfull", mode::carry_remaining_balance);

        storage::lock_wallet_address = in_msg_body~load_msg_addr();
        storage::init? = true;

        save_data();
        return ();
    }

    if (op == op::withdraw_ton) {
        raw_reserve(tons::min_reserve, 0);
        send_excess(storage::admin_address, query_id, 0, mode::carry_remaining_balance);
        return ();
    }
    
    if (op == op::get_storage_data) {  ;; report storage data (for other protocols)
        slice to_address = in_msg_body~load_msg_addr();
        var msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(to_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::report_storage_data, 32)
                    .store_uint(query_id, 64)
                    .store_slice(sender_address)
                    .store_uint(now(), 32)
                    .store_ref(get_data())
                    .store_slice(in_msg_body);

        send_raw_message(msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    ;; check that message is from correct stake_wallet_address
    slice stake_owner_address = in_msg_body~load_msg_addr();
    int lock_period = in_msg_body~load_uint(32);

    (slice period_info_slice, _) = storage::lock_periods.udict_get?(32, lock_period);
    int period_tvl = period_info_slice~load_coins();
    (slice tmp, _) = period_info_slice.load_coins();
    int   reward_multiplier  = tmp~load_uint(16);
    int   deposit_commission = tmp~load_uint(16);
    int   unstake_commission = tmp~load_uint(16);
    slice minter_address     = tmp~load_msg_addr();

    force_stake_wallet(sender_address, my_address(), minter_address, stake_owner_address, lock_period, storage::stake_wallet_code);
    
    if (op == op::cancel_stake) {        
        int jettons_to_return = in_msg_body~load_coins();  ;; load transferred jettons excluding commission
        storage::lock_periods~udict_set_builder(32, lock_period, begin_cell().store_coins(period_tvl - jettons_to_return).store_slice(period_info_slice));
        
        jettons_to_return += in_msg_body~load_coins();  ;; add depoist commission
        send_jettons(query_id, jettons_to_return, stake_owner_address, stake_owner_address, storage::lock_wallet_address, 
                     0, mode::carry_remaining_gas, 1, begin_cell().store_uint(0, 32).store_slice("Stake was unsuccessful").end_cell());
        
        save_data();
        return ();
    }

    if (op == op::request_update_rewards) { 
        raw_reserve(tons::min_reserve, 4);

        int  user_jetton_balance = in_msg_body~load_coins();
        int  tvl_change          = in_msg_body~load_int(121);
        cell user_rewards_dict   = in_msg_body~load_dict();
        int  jettons_to_unstake  = in_msg_body~load_coins();
        int  commission          = in_msg_body~load_coins();
        if (in_msg_body.slice_bits()) {  ;; update request with forward
            sender_address       = in_msg_body~load_msg_addr();
            stake_owner_address  = in_msg_body~load_ref().begin_parse();
        }
        
        (slice reward_jetton, slice rewards_info_slice, int success) = storage::reward_jettons.dict_get_min?(267);
        
        while (success) {
            int distributed_rewards = rewards_info_slice~load_uint(256);
            cell rewards_deposits = rewards_info_slice~load_dict();

            (int index, slice rewards_deposit_slice, int success2) = rewards_deposits.udict_get_min?(32);
            while (success2) {
                int distribution_speed = rewards_deposit_slice~load_coins();
                int start_time         = rewards_deposit_slice~load_uint(32);
                int time_now           = now();
                if (start_time < time_now) {
                    int end_time = rewards_deposit_slice~load_uint(32);
                    if (end_time <= time_now) {
                        rewards_deposits~udict_delete?(32, index);
                        time_now = end_time;
                    }
                    else {
                        rewards_deposits~udict_set_builder(32, index, begin_cell().store_coins(distribution_speed).store_uint(time_now, 32).store_uint(end_time, 32));
                    }
                    distributed_rewards += get_distributed_rewards(distribution_speed, start_time, time_now);
                }
                (index, rewards_deposit_slice, success2) = rewards_deposits.udict_get_next?(32, index);
            }

            (slice user_rewards_slice, int success3) = user_rewards_dict.dict_get?(267, reward_jetton);
            (int user_distributed_rewards, int user_unclaimed_rewards) = success3 ? (user_rewards_slice~load_uint(256), user_rewards_slice~load_coins()) : (0, 0);
            user_unclaimed_rewards += muldiv(muldiv(distributed_rewards - user_distributed_rewards, user_jetton_balance, distributed_rewards_divider), reward_multiplier, reward_multiplier_divider);

            storage::reward_jettons~dict_set_builder(267, reward_jetton, begin_cell().store_uint(distributed_rewards, 256).store_dict(rewards_deposits));
            user_rewards_dict~dict_set_builder(267, reward_jetton, begin_cell().store_uint(distributed_rewards, 256).store_coins(user_unclaimed_rewards));
            (reward_jetton, rewards_info_slice, success) = storage::reward_jettons.dict_get_next?(267, reward_jetton);
        }

        if (jettons_to_unstake) {
            if (commission) {
                send_message_with_comment(storage::admin_address, storage::unstake_fee, "Unstake fee", mode::simple);
            }
            ;; update tvl for period only after unstaking, so user is able to cancel unstake requests
            storage::lock_periods~udict_set_builder(32, lock_period, begin_cell().store_coins(period_tvl - jettons_to_unstake - commission).store_slice(period_info_slice));

            send_jettons(query_id, jettons_to_unstake, stake_owner_address, stake_owner_address, storage::lock_wallet_address, tons::jetton_transfer,
                         mode::pay_fees_separately, 1, begin_cell().store_uint(0, 32).store_slice("Jettons unstaked").end_cell());
        }
        if (tvl_change) {
            storage::tvl += tvl_change;
            storage::tvl_with_multipliers += muldiv(tvl_change, reward_multiplier, reward_multiplier_divider);
        }
        storage::collected_commissions += commission;

        builder payload = begin_cell().store_uint(op::update_rewards, 32).store_uint(query_id, 64).store_dict(user_rewards_dict).store_slice(stake_owner_address);
        send_cell_message(sender_address, 0, payload.end_cell(), mode::carry_remaining_balance);
        
        save_data();
        return ();
    }

    if (op == op::send_claimed_rewards) {
        raw_reserve(tons::min_reserve, 4);
        int  user_jetton_balance = in_msg_body~load_coins();
        cell user_rewards_dict   = in_msg_body~load_dict();
        cell jettons_to_claim    = in_msg_body~load_dict();  ;; HashmapE. jetton_address (MsgAddressStd) -> nothing (int1)

        (slice reward_jetton, _, int success) = jettons_to_claim.dict_get_min?(267);
        int required_gas = 0;

        int should_update_rewards = false;  ;; should we delete elements from storage::reward_jettons? 
        while (success) {
            (slice rewards_info_slice, int jetton_exists) = storage::reward_jettons.dict_get?(267, reward_jetton);
            if (jetton_exists) {
                int should_update_rewards2 = false;
                int distributed_rewards = rewards_info_slice~load_uint(256);
                cell rewards_deposits = rewards_info_slice~load_dict();

                (int index, slice rewards_deposit_slice, int success2) = rewards_deposits.udict_get_min?(32);
                while (success2) {
                    int distribution_speed = rewards_deposit_slice~load_coins();
                    int start_time         = rewards_deposit_slice~load_uint(32);
                    int time_now           = now();
                    if (start_time < time_now) {
                        int end_time = rewards_deposit_slice~load_uint(32);
                        if (end_time <= time_now) {
                            rewards_deposits~udict_delete?(32, index);
                            storage::rewards_deposits_count -= 1;
                            time_now = end_time;
                            should_update_rewards = true;
                            should_update_rewards2 = true;
                        }
                        else {
                            rewards_deposits~udict_set_builder(32, index, begin_cell().store_coins(distribution_speed).store_uint(time_now, 32).store_uint(end_time, 32));
                        }
                        distributed_rewards += get_distributed_rewards(distribution_speed, start_time, time_now);
                    }
                    (index, rewards_deposit_slice, success2) = rewards_deposits.udict_get_next?(32, index);
                }
                
                (slice user_rewards_slice, int success3) = user_rewards_dict~dict_set_get_builder?(267, reward_jetton, begin_cell().store_uint(distributed_rewards, 256).store_coins(0));
                int user_distributed_rewards = 0;
                int prev_user_unclaimed_rewards = 0;
                if (success3) {
                    user_distributed_rewards = user_rewards_slice~load_uint(256);
                    prev_user_unclaimed_rewards = user_rewards_slice~load_coins();
                }
                int new_user_rewards = muldiv(muldiv(distributed_rewards - user_distributed_rewards, user_jetton_balance, distributed_rewards_divider), reward_multiplier, reward_multiplier_divider);
                
                required_gas += send_jettons(query_id, new_user_rewards + prev_user_unclaimed_rewards, stake_owner_address, stake_owner_address, reward_jetton, 
                                             tons::jetton_transfer, mode::pay_fees_separately, 1, begin_cell().store_uint(0, 32).store_slice("Claim staking rewards").end_cell());
                required_gas += tons::jetton_transfer;
                if (should_update_rewards2) {
                    storage::reward_jettons~dict_set_builder(267, reward_jetton, begin_cell().store_uint(distributed_rewards, 256).store_dict(rewards_deposits));
                }
            }
            (reward_jetton, _, success) = jettons_to_claim.dict_get_next?(267, reward_jetton);
        }

        if (should_update_rewards) {
            save_data();
        }

        builder payload = begin_cell().store_uint(op::update_rewards, 32).store_uint(query_id, 64).store_dict(user_rewards_dict).store_slice(stake_owner_address);
    
        required_gas += send_cell_message(sender_address, 0, payload.end_cell(), mode::carry_remaining_balance); 

        required_gas += get_compute_fee(WORKCHAIN, gas::update_rewards + gas_consumed() + 200);
        throw_unless(exc::out_of_gas, msg_value >= required_gas);
        return ();
    }
    
    throw(exc::unsupported_op);
}


(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    ifnot(null?(storage::nft_content)) {
        slice content_cs = storage::nft_content.begin_parse();
        cell loaded_dict = content_cs~load_ref();
        (cell uri, int success) = loaded_dict.udict_get_ref?(256, "uri"H);
        if (success) {
            loaded_dict~udict_set_ref(256, "uri"H, begin_cell().store_slice(uri.begin_parse()).store_number10(storage::pool_id).end_cell());
        }
        return (storage::init?, storage::pool_id, storage::admin_address, storage::creator_address, begin_cell().store_uint(0, 8).store_dict(loaded_dict).end_cell());
    }
    return (storage::init?, storage::pool_id, storage::admin_address, storage::creator_address, storage::nft_content);
}

slice get_authority_address() method_id {
    return null_addr();
}

int get_revoked_time() method_id {
    return 0;
}

slice get_stake_wallet_address(slice owner_address, int lock_period) method_id {
    load_data();
    ifnot (null?(storage::whitelist)) {
        (_, int success) = storage::whitelist.dict_get?(267, owner_address);
        ifnot (success) {
            return null_addr();
        }
    }
    (slice period_info_slice, int success) = storage::lock_periods.udict_get?(32, lock_period);
    ifnot(success) {
        return null_addr();
    }
    period_info_slice~load_coins();
    period_info_slice~load_coins();
    period_info_slice~skip_bits(48);
    slice minter_address = period_info_slice~load_msg_addr();
    cell state_init = calculate_stake_wallet_state_init(my_address(), minter_address, owner_address, lock_period, storage::stake_wallet_code);
    return get_address_by_state_init(state_init);
}

(int, int, slice, slice, cell, slice, int, int, int, int, cell, int, int, cell, cell, int, int, int, int) get_storage_data() method_id {
    load_data();
    return (
        storage::init?,
        storage::pool_id,
        storage::admin_address,
        storage::creator_address,
        storage::stake_wallet_code,
        storage::lock_wallet_address,
        storage::tvl,
        storage::tvl_with_multipliers,
        storage::min_deposit,
        storage::max_deposit,
        storage::reward_jettons,
        storage::reward_jettons_count,
        storage::rewards_deposits_count,
        storage::lock_periods,
        storage::whitelist,
        storage::unstake_fee,
        storage::collected_commissions,
        storage::rewards_commission,
        storage::version
    );
}
