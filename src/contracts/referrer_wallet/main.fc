#include "../imports/all_imports.fc";

#include "storage.fc";
#include "functions.fc";
#include "get_methods.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    load_data();

    if (flags & 1) {  ;; bounced messages
        in_msg_body~skip_bits(32);
        int op = in_msg_body~load_uint(32);
        ;; TODO
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::SET_DATA) {
        if (~ equal_slices(sender_address, FACTORY_ADDRESS)) {
            throw_unless(exc::INCORRECT_SENDER, equal_slices(sender_address, storage::owner_address));
            throw_unless(exc::ALREADY_INITED, init? == 0);

            slice signature = in_msg_body~load_ref().begin_parse();
            throw_unless(exc::WRONG_SIGNATURE, check_signature(slice_hash(in_msg_body), signature, REF_PUBLIC_KEY));
            throw_unless(exc::WRONG_SIGNATURE, equal_slices(sender_address, in_msg_body~load_msg_addr()));

            storage::revenue_share = in_msg_body~load_uint(16);
            storage::invitee_wallet_code = in_msg_body~load_ref();
            ;; storage::pools_dict = null();

            raw_reserve(tons::MIN_RESERVE, 0);
            send_excess(FACTORY_ADDRESS, query_id, 50000000, mode::SIMPLE);
            send_excess(storage::owner_address, query_id, 0, mode::CARRY_REMAINING_BALANCE);
        }
        else {
            storage::revenue_share = in_msg_body~load_uint(16);
            storage::pools_dict = in_msg_body~load_dict();
            storage::invitee_wallet_code = in_msg_body~load_ref();
        }
        save_data();
        return ();
    }


    if (op == op::REQUEST_UPDATE_REFERRER) {
        slice invitee_address = in_msg_body~load_msg_addr();
        force_invitee_wallet(sender_address, invitee_address, storage::invitee_wallet_code);

        int pool_id = in_msg_body~load_uint(32);
        int balance_change = muldiv(in_msg_body~load_int(121), storage::revenue_share, REVENUE_SHARE_DIVIDER);
        ;; We can't just use pool's distributed rewards, because of the possible race condition. So we should send another request to pool :(
        (slice pool_info, int success) = storage::pools_dict.udict_get?(32, pool_id);
        int invitees_balance = 0;
        int has_pending_request = false;
        int pending_change = 0;
        cell rewards_dict = null();
        if (success) {
            invitees_balance = pool_info~load_coins();
            has_pending_request = pool_info~load_int(1);
            pending_change = pool_info~load_int(121);
            rewards_dict = pool_info~load_dict();
        }
        request_update_referrer(pool_id, balance_change, invitees_balance, has_pending_request, pending_change, rewards_dict, invitee_address, query_id);
        
        return ();
    }

    if (op == op::UPDATE_REFERRER) {
        int pool_id = in_msg_body~load_uint(32);
        force_pool(sender_address, pool_id);

        (slice pool_info, int success) = storage::pools_dict.udict_get?(32, pool_id);
        int invitees_balance = in_msg_body~load_int(121);
        int has_pending_request = false;
        int pending_change = 0;
        cell rewards_dict = in_msg_body~load_dict();
        if (success) {
            invitees_balance += pool_info~load_coins();
            has_pending_request = pool_info~load_int(1);
            pending_change = pool_info~load_int(121);
        }

        slice response_address = in_msg_body~load_msg_addr();

        if (pending_change != 0) {
            request_update_referrer(pool_id, invitees_balance, pending_change, false, 0, rewards_dict, response_address, query_id);
            return ();
        }
        else {
            storage::pools_dict~udict_set_builder(32, pool_id, begin_cell().store_coins(invitees_balance).store_int(false, 1).store_int(0, 121).store_dict(rewards_dict));
            if (msg_value >= tons::MIN_EXCESS) {
                send_excess(response_address, query_id, 0, mode::CARRY_REMAINING_GAS);
            }
            save_data();
            return ();
        }        
    }


    if (op == op::CLAIM_REWARDS) {
        cell requests_dict = in_msg_body~load_dict();

        (int pool_id, slice request_info, int success) = requests_dict.udict_get_min?(32);
        while (success) {
            int coins_to_send = request_info~load_coins();
            int max_fwd_fee = muldiv(get_forward_fee(WORKCHAIN, UPDATE_MSG_BITS, UPDATE_MSG_CELLS), 3, 2); 
            throw_unless(exc::OUT_OF_GAS, coins_to_send >= claim_rewards_required_gas(max_fwd_fee) + tons::JETTON_TRANSFER);
            msg_value -= coins_to_send;

            (slice pool_info, int success2) = storage::pools_dict.udict_get?(32, pool_id);
            int invitees_balance = 0;
            int has_pending_request = false;
            ;; int pending_change = 0;
            slice rewards_dict_slice = BIT_FALSE_SLICE();
            if (success2) {
                invitees_balance = pool_info~load_coins();
                has_pending_request = pool_info~load_int(122);
                throw_if(exc::HAS_PENDING_REQUEST, has_pending_request);
                rewards_dict_slice = pool_info;
            }
            storage::pools_dict~udict_set_builder(32, pool_id, begin_cell().store_coins(invitees_balance).store_int(true, 1).store_int(0, 121).store_slice(rewards_dict_slice));
            
            slice pool_address = get_address_by_state_init(calculate_pool_state_init(pool_id));
            cell payload = begin_cell()
                                .store_uint(op::SEND_REFERRER_REWARDS, 32)
                                .store_uint(query_id, 64)
                                .store_slice(storage::owner_address)
                                .store_coins(invitees_balance)
                                .store_slice(rewards_dict_slice)
                                .store_slice(request_info)
                            .end_cell();
            send_cell_message(pool_address, coins_to_send, payload, mode::SIMPLE);

            (pool_id, request_info, success) = requests_dict.udict_get_next?(32, pool_id);
        }

        msg_value -= get_compute_fee(WORKCHAIN, gas_consumed() + 1000);

        throw_unless(exc::OUT_OF_GAS, msg_value > 0);
        if (my_balance + msg_value - tons::MIN_RESERVE > tons::MIN_EXCESS) {
            send_excess(storage::owner_address, query_id, 0, mode::CARRY_REMAINING_BALANCE);
        }

        save_data();
        return ();
    }

    if (op == op::UPGRADE_REFERRER_WALLET) {
        throw_unless(exc::INCORRECT_SENDER, equal_slices(sender_address, storage::owner_address) | equal_slices(sender_address, FACTORY_ADDRESS));
        slice signature = in_msg_body~load_ref().begin_parse();
        throw_unless(exc::WRONG_SIGNATURE, check_signature(slice_hash(in_msg_body), signature, REF_PUBLIC_KEY));
        throw_unless(exc::WRONG_SIGNATURE, equal_slices(sender_address, in_msg_body~load_msg_addr()) &
                                           (in_msg_body~load_uint(32) + 600 >= now()));

        int new_revenue_share = in_msg_body~load_uint(16);
        (int pool_id, slice pool_info, int success) = storage::pools_dict.udict_get_min?(32);
        while (success) {
            int invitees_balance = pool_info~load_coins();
            int has_pending_request = pool_info~load_int(1);
            int pending_change = pool_info~load_int(121);
            pending_change = muldiv(pending_change + invitees_balance, new_revenue_share, storage::revenue_share) - invitees_balance;
            storage::pools_dict~udict_set_builder(32, pool_id, begin_cell().store_coins(invitees_balance).store_int(has_pending_request, 1).store_int(pending_change, 121).store_slice(pool_info));
            (pool_id, pool_info, success) = storage::pools_dict.udict_get_next?(32, pool_id);
        }
        storage::revenue_share = new_revenue_share;
        
        raw_reserve(storage_fees(), 4);
        send_excess(FACTORY_ADDRESS, query_id, 50000000, mode::SIMPLE);
        send_excess(storage::owner_address, query_id, 0, mode::CARRY_REMAINING_BALANCE);

        save_data();
        return ();
    }

    throw(exc::UNSUPPORTED_OP);
}