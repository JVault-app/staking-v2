#include "../imports/all_imports.fc";

#include "storage.fc";
#include "get_methods.fc";
#include "functions.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::transfer_notification) {  ;; someone sent jettons to this smc
        int   transferred_jettons = in_msg_body~load_coins();
        slice from_address        = in_msg_body~load_msg_addr();

        try {
            slice payload = in_msg_body~load_int(1) ? in_msg_body~load_ref().begin_parse() : in_msg_body;
            int inner_op = payload~load_uint(32);
            if (op == 0) {
                return ();
            }
            raw_reserve(storage_fees(), 4);
            
            throw_unless(exc::out_of_gas, msg_value >= tons::create_staking_pool);

            if (inner_op == op::deploy_new_pool) {
                throw_unless(exc::incorrect_jetton, equal_slices(sender_address, storage::fees_wallet_address));
                throw_unless(exc::not_enough_jettons, transferred_jettons == storage::creation_fee);
                
                send_jettons(query_id, transferred_jettons, storage::admin_address, storage::admin_address, storage::fees_wallet_address, 
                             tons::jetton_transfer, mode::simple, 1, begin_cell().store_uint(0, 32).store_slice("JVault commission").end_cell());

                slice lock_wallet_address = payload~load_msg_addr();
                
                cell pool_state_init = calculate_pool_state_init(storage::next_pool_id);
                slice pool_address = get_address_by_state_init(pool_state_init);
               
                (cell pool_data, int gas_required) = get_pool_data(payload, from_address, lock_wallet_address, pool_address);
                gas_required += tons::jetton_transfer;

                cell pool_deploy_payload = begin_cell()
                                                .store_slice(lock_wallet_address)
                                                .store_ref(pool_data)
                                                .store_ref(storage::pool_inited_code)
                                            .end_cell();
                gas_required += send_deploy_message(pool_address, tons::deploy_pool, pool_state_init, pool_deploy_payload, mode::carry_remaining_balance);

                storage::next_pool_id += 1;
                save_data();

                gas_required += get_compute_fee(WORKCHAIN, gas_consumed() + 200);
                throw_unless(exc::out_of_gas, gas_required <= msg_value);
                return ();
            }
        }
        catch (_, n) { ;; if something went wrong contract tries to return jettons back with corresponding error code as a comment
            send_jettons(query_id, transferred_jettons, from_address, from_address, sender_address, 0, mode::carry_remaining_gas,
                           1, begin_cell().store_uint(0, 32).store_slice("Error. Code ").store_number10(n).end_cell());  
            return ();
        }
    }
    
    if ((op == 0) | (op == op::excesses)) {  ;; take unstake fee
        return ();
    }

    ;; Admin commands
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address) | equal_slices(sender_address, storage::owner_address));
    
    if (op == op::withdraw_ton) {
        raw_reserve(tons::min_reserve, 0);
        send_message_with_comment(storage::admin_address, 0, "TON withrawal", mode::carry_remaining_balance);
        return ();
    }

    if (op == op::withdraw_jetton) {
        slice jetton_to_withdraw = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();

        send_jettons(query_id, jetton_amount, storage::admin_address, storage::admin_address, jetton_to_withdraw, 0, mode::carry_remaining_gas,
                     msg_value - tons::jetton_transfer, begin_cell().store_slice(in_msg_body).end_cell());
        return ();
    }

    if (op == op::send_withdraw_ton) {
        slice pool_address = in_msg_body~load_msg_addr();
        send_builder_message(pool_address, 0, begin_cell().store_uint(op::withdraw_ton, 32).store_uint(query_id, 64), mode::carry_remaining_gas);
        return ();
    }

    ;; Owner commands
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::owner_address));

    if (op == op::take_wallet_address) { ;; change fees wallet address
        storage::fees_wallet_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::change_creation_fee) {
        storage::creation_fee = in_msg_body~load_coins();
        builder msg_body = begin_cell()
                                .store_uint(0, 32)
                                .store_slice("Creation fee was changed to ")
                                .store_str_jettons(storage::creation_fee, 1000000000, "JVT");
        send_cell_message(storage::admin_address, 0, msg_body.end_cell(), mode::carry_remaining_gas);

        save_data();
        return ();
    }

    if (op == op::change_content) {
        storage::collection_content = in_msg_body~load_dict();
        send_message_with_comment(storage::admin_address, 0, "Content was changed", mode::carry_remaining_gas);
        save_data();
        return ();
    }

    if (op == op::update_codes) {
        storage::pool_inited_code = in_msg_body~load_ref();
        storage::stake_wallet_code = in_msg_body~load_ref();
        storage::jetton_minter_code = in_msg_body~load_ref();
        storage::version += 1;
        send_excess(sender_address, query_id, 0, mode::carry_remaining_gas);
        save_data();
        return ();
    }

    if (op == op::set_code) {
        cell code = in_msg_body~load_ref();
        set_c3(code.begin_parse().bless());
        if (in_msg_body.slice_refs()) {
            set_data(in_msg_body~load_ref());
        }
        load_data();
        set_code(code);
        send_message_with_comment(storage::owner_address, 0, "Code updated", mode::carry_remaining_gas);
        return ();
    }

    if (op == op::send_any_message) {
        slice to_address = in_msg_body~load_msg_addr();
        cell paylaod = in_msg_body~load_ref();
        send_cell_message(to_address, 0, paylaod, mode::carry_remaining_gas);
        return ();
    }
    
    throw(exc::unsupported_op);
}
