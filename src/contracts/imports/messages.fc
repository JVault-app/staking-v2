() send_excess(slice to_address, int query_id, int value, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(op::excesses, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_uint(query_id, 64)
                    .end_cell();
    send_raw_message(msg, sending_mode);
}

(int) send_builder_message(slice to_address, int value, builder payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_builder(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_cell_message(slice to_address, int value, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_maybe_ref(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_deploy_message(slice to_address, int value, cell state_init, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(3, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(state_init)
                    .store_maybe_ref(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_message_with_comment(slice to_address, int value, slice comment, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_slice(comment)
                .end_cell();
    return send_message(msg, sending_mode);
}

(int) send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
                   int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_maybe_ref(forward_payload);

    return send_cell_message(jetton_wallet_address, msg_value, msg_body.end_cell(), sending_mode);
}


(int) burn_jettons(int query_id, int jetton_amount, slice jetton_wallet_address,
                   slice response_address, int msg_value, int sending_mode) impure inline {
    cell msg_body = begin_cell()
                        .store_uint(op::burn_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(response_address)
                    .end_cell();

    return send_cell_message(jetton_wallet_address, msg_value, msg_body, sending_mode);
}
