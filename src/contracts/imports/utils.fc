slice null_addr() asm "b{00} PUSHSLICE";

cell  preload_ref_index(slice s, int n) asm "PLDREFVAR";

() send_excess(slice to_address, int query_id, int value, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(op::excesses, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_uint(query_id, 64)
                    .end_cell();
    send_raw_message(msg, sending_mode);
}

(int) send_builder_message(slice to_address, int value, builder payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_builder(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_cell_message(slice to_address, int value, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_maybe_ref(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_deploy_message(slice to_address, int value, cell state_init, cell payload, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(3, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_ref(state_init)
                    .store_maybe_ref(payload)
                .end_cell();
    return send_message(msg, sending_mode);
}


(int) send_message_with_comment(slice to_address, int value, slice comment, int sending_mode) impure inline {
    cell msg = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(to_address)
                    .store_coins(value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_slice(comment)
                .end_cell();
    return send_message(msg, sending_mode);
}

cell pack_state_init(cell code, cell data) inline {
    return begin_cell()
                .store_uint(0, 2)
                .store_maybe_ref(code)
                .store_maybe_ref(data)
                .store_uint(0, 1)
            .end_cell();
}

cell calculate_stake_wallet_state_init(slice pool_address, slice minter_address,
                                       slice owner_address, int lock_period, cell stake_wallet_code) inline {
    cell data = begin_cell()
                    .store_slice(pool_address)
                    .store_slice(minter_address)
                    .store_slice(owner_address)
                    .store_ref(
                        begin_cell()
                            .store_uint(lock_period, 32)
                            .store_uint(1, 19)
                        .end_cell()
                    )
                .end_cell();
    return pack_state_init(stake_wallet_code, data);
}

slice get_address_by_state_init(cell state_init) inline { 
    return begin_cell()
                .store_uint(1024, 11)
                .store_uint(cell_hash(state_init), 256)
            .end_cell().begin_parse();
}


(int) send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
                   int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_uint(1, 1)
                        .store_maybe_ref(forward_payload);

    return send_cell_message(jetton_wallet_address, msg_value, msg_body.end_cell(), sending_mode);
}


(int) burn_jettons(int query_id, int jetton_amount, slice jetton_wallet_address,
                   slice response_address, int msg_value, int sending_mode) impure inline {
    cell msg_body = begin_cell()
                        .store_uint(op::burn_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(response_address)
                    .end_cell();

    return send_cell_message(jetton_wallet_address, msg_value, msg_body, sending_mode);
}


() force_same_workchain(slice addr) impure inline {
    (int wc, _) = parse_std_addr(addr);
    throw_unless(exc::wrong_chain, wc == WORKCHAIN);
}

() force_stake_wallet(slice sender_address, slice pool_address, slice minter_address, 
                      slice stake_owner_address, int lock_period, cell stake_wallet_code) impure inline {
    cell tmp = calculate_stake_wallet_state_init(pool_address, minter_address, stake_owner_address, lock_period, stake_wallet_code);
    throw_unless(exc::incorrect_sender, equal_slices(get_address_by_state_init(tmp), sender_address));
}


(slice, int) ~retrieve_fwd_fee(slice in_msg_full_slice) inline {
    in_msg_full_slice~load_msg_addr(); ;; skip dst
    in_msg_full_slice~load_coins(); ;; skip value
    in_msg_full_slice~skip_dict(); ;; skip extracurrency collection
    in_msg_full_slice~load_coins(); ;; skip ihr_fee
    int fwd_fee = in_msg_full_slice~load_coins();
    return (in_msg_full_slice, fwd_fee);
}

;; taken from Openlib (https://github.com/continuation-team/openlib.func/blob/main/openlib.func)
builder store_number10(builder b, int x) asm """
  ZERO                                                        // b x i=0
  SWAP                                                        // b i=0 x
  UNTIL:<{                                                    // b i x
    10 PUSHINT DIVMOD                                         // b i x r
    48 ADDCONST                                               // b i x r
    s3 s1 s3 XCHG3                                            // r b x i
    INC                                                       // r b x i
    s1 s0 XCPU                                                // r b i x x
    ISZERO
  }>
  DROP
  REPEAT:<{ 8 STU }>                                          // ..rrr.. b i
""";


builder store_str_float(builder b, int number, int ten_pow_decimals) {
    (int int_part, int dec_part) = divmod(number, ten_pow_decimals);
    if (int_part + dec_part == 0) {
        return b.store_number10(0);
    }

    ;; displayed decimals = max(min(jetton_decimals, 5 - log10(int_part)), 0)
    b = b.store_number10(int_part);
    int max_dec_part = (int_part) ? (100000 / int_part) : (muldiv(ten_pow_decimals, ten_pow_decimals, (100000 * (dec_part + 1))));
    while (dec_part > max_dec_part) {
        dec_part /= 10;
    }
    if (dec_part) {
        b = b.store_uint(46, 8)  ;; store "." (dot)
                .store_number10(dec_part);
    }

    return b;
}

builder store_str_jettons(builder b, int jetton_amount, int one_jetton, slice symbol) {
    return b.store_str_float(jetton_amount, one_jetton)
                .store_uint(32, 8)  ;; store " " (space)
                .store_slice(symbol);
}
