#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global slice storage::admin_address;             ;; MsgAddressStd. Owner of the factory
global int   storage::next_pool_id;              ;; Uint16. Next pool id
global cell  storage::collection_content;        ;; Cell. NFT collection onchain content

global int   storage::min_rewards_commission;    ;; Uint16. Min rewards service commission rate
global int   storage::unstake_fee;               ;; Coins. Protocol fee for unstaking
global slice storage::fees_wallet_address;       ;; MsgAddressStd. JVT jetton wallet's address 
global int   storage::creation_fee;              ;; Coins. Pool creation fee in JVT

global cell  storage::pool_uninited_codes;       ;; HashmapE. change_index (uint32) -> pool_uninited_code (Cell)
global cell  storage::pool_inited_code;          ;; Cell. Code of the staking_pool.fc
global cell  storage::stake_wallet_code;         ;; Cell. Code of the stake_wallet.fc
global cell  storage::jetton_minter_code;        ;; Cell. Code of the jetton_minter.fc

global int   storage::version;                   ;; Uint16. Current version of smart contract


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; bits = 267 + 32 + 1 + 16 + 124 + 267 + 124 = 831; refs = 2;
    storage::admin_address          = ds~load_msg_addr();
    storage::next_pool_id           = ds~load_uint(32);
    storage::collection_content     = ds~load_dict();

    storage::min_rewards_commission = ds~load_uint(16);
    storage::unstake_fee            = ds~load_coins();
    storage::fees_wallet_address    = ds~load_msg_addr();
    storage::creation_fee           = ds~load_coins();

    slice ds2 = ds~load_ref().begin_parse();
    ds.end_parse();
    
    storage::pool_uninited_codes    = ds2~load_dict(); ;; bits 16 + 124 = 140; refs = 4
    storage::pool_inited_code       = ds2~load_ref();
    storage::stake_wallet_code      = ds2~load_ref();
    storage::jetton_minter_code     = ds2~load_ref();
    storage::version                = ds2~load_uint(16);
    
    ds2.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::admin_address)
            .store_uint(storage::next_pool_id, 32)
            .store_dict(storage::collection_content)
            .store_uint(storage::min_rewards_commission, 16)
            .store_coins(storage::unstake_fee)
            .store_slice(storage::fees_wallet_address)
            .store_coins(storage::creation_fee)
            .store_ref(
                begin_cell()
                    .store_dict(storage::pool_uninited_codes)
                    .store_ref(storage::pool_inited_code)
                    .store_ref(storage::stake_wallet_code)
                    .store_ref(storage::jetton_minter_code)
                    .store_uint(storage::version, 16)
                .end_cell()
            )
        .end_cell()
    );
}


cell calculate_pool_state_init(int pool_id, cell pool_code) {
    cell pool_data = begin_cell().store_slice(my_address()).store_uint(pool_id, 32).end_cell();
    return pack_state_init(pool_code, pool_data);
}


cell calculate_minter_state_init(slice pool_address, int lock_period, cell jetton_content) {
    cell minter_data = begin_cell()
                            .store_coins(0)
                            .store_slice(pool_address)
                            .store_uint(lock_period, 32)
                            .store_dict(jetton_content)
                            .store_ref(storage::stake_wallet_code)
                        .end_cell();
    return pack_state_init(storage::jetton_minter_code, minter_data);
}


(cell, int) get_pool_data(slice payload, slice from_address, slice lock_wallet_address, slice pool_address) {
    int gas_required = 0;

    int min_deposit = payload~load_coins();
    int max_deposit = payload~load_coins();
    throw_unless(exc::more_than_max_deposit, max_deposit >= min_deposit);

    cell lock_periods = payload~load_dict();
    (int lock_period, slice period_info, int success) = lock_periods.udict_get_min?(32);
    while (success) {
        int  tvl_limit          = period_info~load_coins();
        int  reward_multiplier  = period_info~load_uint(16);
        int  deposit_commission = period_info~load_uint(16);
        int  unstake_commission = period_info~load_uint(16);
        cell jetton_content     = period_info~load_dict();

        cell minter_state_init = calculate_minter_state_init(pool_address, lock_period, jetton_content);
        slice minter_addresss = get_address_by_state_init(minter_state_init);
        
        builder dict_value = begin_cell()
                                .store_coins(0)
                                .store_coins(tvl_limit)
                                .store_uint(reward_multiplier, 16)
                                .store_uint(deposit_commission, 16)
                                .store_uint(unstake_commission, 16)
                                .store_slice(minter_addresss);
        lock_periods~udict_set_builder(32, lock_period, dict_value);

        gas_required += (send_deploy_message(minter_addresss, tons::deploy_minter, minter_state_init, null(), mode::pay_fees_separately)
                         + tons::deploy_minter);

        (lock_period, period_info, success) = lock_periods.udict_get_next?(32, lock_period);
    }
    
    cell whitelist = payload~load_dict();
    int  rewards_commission = payload~load_uint(16);
    throw_unless(exc::incorrect_rewards_commission, rewards_commission >= storage::min_rewards_commission);
    
    cell nft_content = payload~load_maybe_ref();

    cell pool_data =  begin_cell()
                        .store_int(0, 1)                            ;; init?
                        .store_uint(storage::next_pool_id, 32)
                        .store_slice(my_address())
                        .store_slice(from_address)
                        .store_slice(lock_wallet_address)
                        .store_maybe_ref(nft_content)
                        .store_ref(storage::stake_wallet_code)  
                        .store_ref(
                            begin_cell()
                                .store_coins(0)                     ;; tvl
                                .store_coins(0)                     ;; tvl_with_multipliers
                                .store_coins(min_deposit)
                                .store_coins(max_deposit)
                                .store_int(0, 17)                   ;; rewards & counters
                                .store_dict(lock_periods)
                                .store_dict(whitelist)
                                .store_coins(storage::unstake_fee)  
                                .store_coins(0)                     ;; collected commissions
                                .store_uint(rewards_commission, 16)
                                .store_uint(storage::version, 16)
                            .end_cell()
                        )
                    .end_cell();
    return (pool_data, gas_required);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::transfer_notification) {  ;; someone sent jettons to this smc
        int   transferred_jettons = in_msg_body~load_coins();
        slice from_address        = in_msg_body~load_msg_addr();

        try {
            slice payload = in_msg_body~load_int(1) ? in_msg_body~load_ref().begin_parse() : in_msg_body;
            int inner_op = payload~load_uint(32);
            raw_reserve(storage_fees(), 4);
            
            throw_unless(exc::out_of_gas, msg_value >= tons::create_staking_pool);

            if (inner_op = op::deploy_new_pool) {
                throw_unless(exc::incorrect_jetton, equal_slices(sender_address, storage::fees_wallet_address));
                throw_unless(exc::not_enough_jettons, transferred_jettons == storage::creation_fee);
                
                send_jettons(query_id, transferred_jettons, storage::admin_address, storage::admin_address, storage::fees_wallet_address, 
                             tons::jetton_transfer, mode::simple, 1, begin_cell().store_uint(0, 32).store_slice("JVault commission").end_cell());

                slice lock_wallet_address = payload~load_msg_addr();
                (_, cell pool_code, _) = storage::pool_uninited_codes.udict_get_max_ref?(32);
                
                cell pool_state_init = calculate_pool_state_init(storage::next_pool_id, pool_code);
                slice pool_address = get_address_by_state_init(pool_state_init);
               
                (cell pool_data, int gas_required) = get_pool_data(payload, from_address, lock_wallet_address, pool_address);
                gas_required += tons::jetton_transfer;

                cell pool_deploy_payload = begin_cell()
                                                .store_slice(lock_wallet_address)
                                                .store_ref(pool_data)
                                                .store_ref(storage::pool_inited_code)
                                            .end_cell();
                gas_required += send_deploy_message(pool_address, tons::deploy_pool, pool_state_init, pool_deploy_payload, mode::carry_remaining_balance);

                storage::next_pool_id += 1;
                save_data();

                gas_required += get_compute_fee(WORKCHAIN, gas_consumed() + 200);
                throw_unless(exc::out_of_gas, gas_required <= msg_value);

                return ();
            }
        }
        catch (_, n) { ;; if something went wrong contract tries to return jettons back with corresponding error code as a comment
            send_jettons(query_id, transferred_jettons, from_address, from_address, sender_address, 0, mode::carry_remaining_gas,
                           1, begin_cell().store_uint(0, 32).store_slice("Error. Code ").store_number10(n).end_cell());  
            return ();
        }
    }
    
    ;; Admin commands
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address));
    
    if (op == op::take_wallet_address) { ;; change fees wallet address
        storage::fees_wallet_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == op::update_pool_code) {
        storage::pool_uninited_codes~udict_set_ref(128, storage::next_pool_id, in_msg_body~load_ref());
        save_data();
        return ();
    }

    if (op == op::set_code) {
        set_code(in_msg_body~load_ref());
        if (in_msg_body.slice_refs()) {
            set_data(in_msg_body~load_ref());
        }
        return ();
    }

    if (op == op::withdraw_jetton) {
        slice jetton_to_withdraw = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        slice recipient = in_msg_body~load_msg_addr();

        send_jettons(query_id, jetton_amount, recipient, recipient, jetton_to_withdraw, 0, mode::carry_remaining_gas,
                     msg_value - tons::jetton_transfer, begin_cell().store_slice(in_msg_body).end_cell());
        return ();
    }

    if (op == op::change_creation_fee) {
        storage::creation_fee = in_msg_body~load_coins();
        builder msg_body = begin_cell()
                                .store_uint(0, 32)
                                .store_slice("Creation fee was changed to ")
                                .store_str_jettons(storage::creation_fee, 1000000000, "JVT");
        send_cell_message(storage::admin_address, 0, msg_body.end_cell(), mode::carry_remaining_gas);

        save_data();
        return ();
    }
    
    if (op == op::withdraw_ton) {
        raw_reserve(tons::min_reserve, 0);
        send_message_with_comment(storage::admin_address, 0, "TON withrawal", mode::carry_remaining_balance);
        return ();
    }

    if (op == op::change_content) {
        storage::collection_content = in_msg_body~load_dict();
        send_message_with_comment(storage::admin_address, 0, "Content was changed", mode::carry_remaining_gas);
        save_data();
        return ();
    }
}


;; GET methods

(int, cell, slice) get_collection_data() method_id {
    load_data();
    return (storage::next_pool_id, storage::collection_content, storage::admin_address);
}


cell get_nft_content(int index, cell individual_content) method_id {
    return individual_content;
}


slice get_nft_address_by_index(int index) method_id {
    load_data();
    (_, slice pool_code_slice, _) = storage::pool_uninited_codes.udict_get_preveq?(128, index);
    cell pool_code = pool_code_slice~load_ref();
    cell state_init = calculate_pool_state_init(index,pool_code);
    return get_address_by_state_init(state_init);
}


(slice, int, cell, int, int, slice, int, cell, cell, cell, cell, int) get_storage_data() method_id {
    load_data();
    return (
        storage::admin_address,
        storage::next_pool_id,
        storage::collection_content,
        storage::min_rewards_commission,
        storage::unstake_fee,
        storage::fees_wallet_address,
        storage::creation_fee,
        storage::pool_uninited_codes,
        storage::pool_inited_code,
        storage::stake_wallet_code,
        storage::jetton_minter_code,
        storage::version
    );
}