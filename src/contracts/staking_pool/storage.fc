global int   storage::init?;                   ;; Int1. Is lock wallet address set?
global int   storage::pool_id;                 ;; Uint32. Unique index for each pool factory;
global slice storage::admin_address;           ;; MsgAddressStd. Address that will receive commissions;
global slice storage::creator_address;         ;; MsgAddressStd. Address of this staking pool creator
global slice storage::lock_wallet_address;     ;; MsgAddressStd. Address of jetton wallet for staking jetton
global cell  storage::nft_content;             ;; HashmapE. Nft content
global cell  storage::stake_wallet_code;       ;; Cell. Stake wallet code

global int   storage::tvl;                     ;; Coins. Current TVL
global int   storage::tvl_with_multipliers;    ;; Coins. Current TVL with multipliers taken into account
global int   storage::min_deposit;             ;; Coins. Min staking deposit
global int   storage::max_deposit;             ;; Coins. Max staking deposit

global cell  storage::reward_jettons;          ;; HashmapE. jetton_wallet_address (MsgAddressStd) -> distributed_rewards (uint256), HashmapE(index (uint32) -> distribution_speed (coins), start_time (uint32), end_time (uint32))
global int   storage::reward_jettons_count;    ;; Uint8. Current number of reward jettons
global int   storage::rewards_deposits_count;  ;; Uint8. Current number of active rewards deposits      

global cell  storage::lock_periods;            ;; HashmapE. lock_period (uint32) -> cur_tvl (Coins), tvl_limit (Coins), reward_multiplier (uint16), deposit_commission (uint16), unstake_commission (uint16), minter_address (MsgAddressStd)

global cell  storage::whitelist;               ;; HashmapE. user_address (MsgAddressStd) -> nothing (int1)

global int   storage::unstake_fee;             ;; Coins. Const JVault's TON fee
global int   storage::collected_commissions;   ;; Coins. Commissions collected from instant unstakes  

global int   storage::rewards_commission;      ;; Uint16. JVault's commission as percent of staking rewards. Commission rate = commission_factor / commission_divider.
global int   storage::version;                 ;; Uint16. Version of the staking pool code


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; Bits = 1 + 32 + 267 + 267 + 267 + 1 = 835. Refs = 3.
    storage::init?                 = ds~load_int(1);
    storage::pool_id               = ds~load_uint(32);
    storage::admin_address         = ds~load_msg_addr();
    storage::creator_address       = ds~load_msg_addr();
    storage::lock_wallet_address   = ds~load_msg_addr();
    storage::nft_content           = ds~load_maybe_ref();
    storage::stake_wallet_code     = ds~load_ref();

    slice ds2 = ds~load_ref().begin_parse();  ;; Bits = 124 + 124 + 124 + 124 + 1 + 8 + 8 + 1 + 1 + 124 + 124 + 16 + 16 = 795. Refs = 3.
    ds.end_parse();

    storage::tvl                    = ds2~load_coins();
    storage::tvl_with_multipliers   = ds2~load_coins();
    storage::min_deposit            = ds2~load_coins();
    storage::max_deposit            = ds2~load_coins();
    storage::reward_jettons         = ds2~load_dict();
    storage::reward_jettons_count   = ds2~load_uint(8);
    storage::rewards_deposits_count = ds2~load_uint(8);
    storage::lock_periods           = ds2~load_dict();
    storage::whitelist              = ds2~load_dict();
    storage::unstake_fee            = ds2~load_coins();
    storage::collected_commissions  = ds2~load_coins();
    storage::rewards_commission     = ds2~load_uint(16);
    storage::version                = ds2~load_uint(16);
    ds2.end_parse();
}


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_int(storage::init?, 1)
            .store_uint(storage::pool_id, 32)
            .store_slice(storage::admin_address)
            .store_slice(storage::creator_address)
            .store_slice(storage::lock_wallet_address)
            .store_maybe_ref(storage::nft_content)
            .store_ref(storage::stake_wallet_code)
            .store_ref(
                begin_cell()
                    .store_coins(storage::tvl)
                    .store_coins(storage::tvl_with_multipliers)
                    .store_coins(storage::min_deposit)
                    .store_coins(storage::max_deposit)
                    .store_dict(storage::reward_jettons)
                    .store_uint(storage::reward_jettons_count, 8)
                    .store_uint(storage::rewards_deposits_count, 8)
                    .store_dict(storage::lock_periods)
                    .store_dict(storage::whitelist)
                    .store_coins(storage::unstake_fee)
                    .store_coins(storage::collected_commissions)
                    .store_uint(storage::rewards_commission, 16)
                    .store_uint(storage::version, 16)
                .end_cell()
            )
        .end_cell()
    );
}
