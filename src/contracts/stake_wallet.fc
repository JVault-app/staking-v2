#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";
#include "imports/gas.fc";


global slice storage::staking_pool_address;     ;; MsgAddressStd. Address of the staking pool
global slice storage::owner_address;            ;; MsgAddressStd. Address of the owner
global int   storage::lock_period;              ;; Uint32. Time to wait for free withdrawal
            
global int   storage::jetton_balance;           ;; Coins. Free staked jettons (not requested for unstake) 
global cell  storage::rewards_dict;             ;; HashmapE. reward jetton address (MsgAddressStd) -> last_distributed_rewards (uint256), unclaimed_rewards (coins)

global cell  storage::unstake_requests;         ;; HashmapE. request_time (uint32) -> jettons_to_unstake (coins)
global int   storage::requests_count;           ;; Uint8. Current number of unstake requests
global int   storage::total_requested_jettons;  ;; Coins. Total amount of jettons requested for unstake

global int   storage::is_active;                ;; Bool. Does this wallet allow actions?

global int   storage::unstake_commission;       ;; Uint16. Commission rate for instant unstakes
global int   storage::unstake_fee;              ;; Coins. Const TON fee for instant withdrawal
        
global int   storage::min_deposit;              ;; Coins. Minimal stake amount
global int   storage::max_deposit;              ;; Coins. Maximum stake amount
global cell  storage::whitelist;                ;; HashmapE. user_address (MsgAddressStd) -> nothing (int1)
global slice storage::minter_address;           ;; MsgAddressStd. Address of the jetton minter (master). Is used only for TEP-74 compatibility

global int  init?;


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; Bits = 267 + 267 + 267 = 801. Refs = 1.
    storage::staking_pool_address    = ds~load_msg_addr();
    storage::minter_address          = ds~load_msg_addr();
    storage::owner_address           = ds~load_msg_addr(); 

    slice ds2 = ds~load_ref().begin_parse();  ;; Bits = 32 + 124 + 1 + 1 + 8 + 124 + 1 + 16 + 124 + 124 + 124 + 1 = 680. Refs = 3.
    ds.end_parse();

    storage::lock_period             = ds2~load_uint(32); 
    storage::jetton_balance          = ds2~load_coins();
    storage::rewards_dict            = ds2~load_dict();              
    storage::unstake_requests        = ds2~load_dict();
    storage::requests_count          = ds2~load_uint(8);
    storage::total_requested_jettons = ds2~load_coins();
    storage::is_active               = ds2~load_int(1);

    init? = false;
    if (ds2.slice_bits()) {
        init? = true;
        storage::unstake_commission      = ds2~load_uint(16);
        storage::unstake_fee             = ds2~load_coins();
        storage::min_deposit             = ds2~load_coins();
        storage::max_deposit             = ds2~load_coins();
        storage::whitelist               = ds2~load_dict();
    }
    
    ds2.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::staking_pool_address)
            .store_slice(storage::minter_address)
            .store_slice(storage::owner_address)
            .store_ref(
                begin_cell()
                    .store_uint(storage::lock_period, 32)
                    .store_coins(storage::jetton_balance)
                    .store_dict(storage::rewards_dict)
                    .store_dict(storage::unstake_requests)
                    .store_uint(storage::requests_count, 8)
                    .store_coins(storage::total_requested_jettons)
                    .store_int(storage::is_active, 1)
                    .store_uint(storage::unstake_commission, 16)
                    .store_coins(storage::unstake_fee)
                    .store_coins(storage::min_deposit)
                    .store_coins(storage::max_deposit)
                    .store_dict(storage::whitelist)
                .end_cell()
            )
        .end_cell()
    );
}


(int) send_update_request(int jettons_to_send, int tvl_change, int commission, int query_id, int msg_value, int sending_mode) impure inline {
    storage::is_active = false;
    cell payload = begin_cell()  ;; Bits = 32 + 64 + 267 + 32 + 124 + 121 + 1 + 124 + 124 = 889. Refs = 1.
                        .store_uint(op::request_update_rewards, 32)
                        .store_uint(query_id, 64)
                        .store_slice(storage::owner_address)
                        .store_uint(storage::lock_period, 32)
                        .store_coins(storage::jetton_balance)
                        .store_int(tvl_change, 121)
                        .store_dict(storage::rewards_dict)
                        .store_coins(jettons_to_send)
                        .store_coins(commission)
                    .end_cell();
    return send_cell_message(storage::staking_pool_address, msg_value, payload, sending_mode);
}


(int) send_update_request_with_forward(int jetton_balance, cell rewards_dict, slice forward_address, int query_id, int msg_value, int sending_mode) impure inline {
    storage::is_active = false;
    cell payload = begin_cell()  ;; Bits = 32 + 64 + 267 + 32 + 124 + 121 + 1 + 4 + 4 + 267 = 916. Refs = 1.
                        .store_uint(op::request_update_rewards, 32)
                        .store_uint(query_id, 64)
                        .store_slice(storage::owner_address)
                        .store_uint(storage::lock_period, 32)
                        .store_coins(jetton_balance)
                        .store_int(0, 121)
                        .store_dict(rewards_dict)
                        .store_coins(0)
                        .store_coins(0)
                        .store_slice(forward_address)
                    .end_cell();
    return send_cell_message(storage::staking_pool_address, msg_value, payload, sending_mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int fwd_fee_from_in_msg = cs~retrieve_fwd_fee();
    int fwd_fee = get_original_fwd_fee(WORKCHAIN, fwd_fee_from_in_msg); 

    if (flags & 1) {  ;; bounced messages
        in_msg_body~skip_bits(32);
        int op = in_msg_body~load_uint(32);
        if (op == op::send_claimed_rewards) {
            storage::is_active = true;
            save_data();
        }
        send_excess(storage::owner_address, 0, 0, mode::carry_remaining_gas | mode::ignore_errors);
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::receive_jettons) {
        throw_unless(exc::has_pending_request, storage::is_active);
        raw_reserve(init? ? storage_fees() : tons::min_reserve, 4);
        
        ;; not in state_init so this variables can be changed after deployment
        storage::min_deposit        = in_msg_body~load_coins();
        storage::max_deposit        = in_msg_body~load_coins();
        storage::unstake_commission = in_msg_body~load_uint(16);
        storage::unstake_fee        = in_msg_body~load_coins();
        storage::whitelist          = in_msg_body~load_dict();

        int received_jettons        = in_msg_body~load_coins();
        int deposit_commission      = in_msg_body~load_coins();

        if ((storage::jetton_balance + received_jettons + storage::total_requested_jettons > storage::max_deposit) | (~ storage::is_active)) {
            
            cell cancel_payload = begin_cell()
                                .store_uint(op::cancel_stake, 32)
                                .store_uint(query_id, 64)
                                .store_slice(storage::owner_address)
                                .store_uint(storage::lock_period, 32)
                                .store_coins(received_jettons)
                                .store_coins(deposit_commission)
                            .end_cell();          
            send_cell_message(sender_address, 0, cancel_payload, mode::carry_remaining_gas);
    
            return ();
        }
        
        ifnot (equal_slices(sender_address, storage::staking_pool_address)) {
            slice from_address = in_msg_body~load_msg_addr();
            force_stake_wallet(sender_address, storage::staking_pool_address, storage::minter_address, from_address, storage::lock_period, my_code());
            slice payload = in_msg_body~load_ref().begin_parse();
            slice response_address = payload~load_msg_addr();
            int   forward_amount   = payload~load_coins();
            int   sender_balance   = payload~load_coins();
            cell  sender_rewards   = payload~load_dict();

            ;; this order of update messages is used for preventing race condition
            int request_update_tons = update_request_required_gas(fwd_fee);
            send_update_request_with_forward(sender_balance, sender_rewards, sender_address, query_id, request_update_tons, mode::pay_fees_separately);
            send_update_request(0, 0, 0, query_id, request_update_tons, mode::pay_fees_separately);
            
            if (forward_amount) {
                cell notification_payload = begin_cell()
                                                .store_uint(op::transfer_notification, 32)
                                                .store_uint(query_id, 64)
                                                .store_coins(received_jettons)
                                                .store_slice(from_address)
                                                .store_slice(payload)  ;;forward_payload:(Either Cell ^Cell)
                                            .end_cell();
                send_cell_message(storage::owner_address, forward_amount, notification_payload, mode::pay_fees_separately);
            }
    
            send_excess(response_address, query_id, 0, mode::carry_remaining_balance | mode::ignore_errors);
            ~strdump("stake_wallet: receive from user");
        }
        else {  
            send_update_request(0, received_jettons, deposit_commission, query_id, 0, mode::carry_remaining_balance);
            ~strdump("stake_wallet: receive from pool");
        }

        storage::jetton_balance += received_jettons;
        save_data();

        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }

    if (op == op::cancel_stake) {
        slice from_address = in_msg_body~load_msg_addr();
        force_stake_wallet(sender_address, storage::staking_pool_address, storage::minter_address, from_address, storage::lock_period, my_code());
        in_msg_body~skip_bits(32);

        send_message_with_comment(storage::owner_address, 0, "Transfer was unsuccessful", mode::carry_remaining_gas);
        
        storage::jetton_balance += in_msg_body~load_coins();
        storage::is_active = true;

        save_data();
        return (); 
    }
    
    if (op == op::update_rewards) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::staking_pool_address));
        
        storage::rewards_dict = in_msg_body~load_dict();
        storage::is_active = true;
        send_excess(storage::owner_address, query_id, 0, mode::carry_remaining_gas | mode::ignore_errors);
        
        save_data();
        
        ~strdump("stake_wallet: save updated rewards");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));
        
        return ();
    }

    if (op == op::get_storage_data) {
        slice to_address = in_msg_body~load_msg_addr();
        var msg = begin_cell()
                    .store_uint(0x10, 6)
                    .store_slice(to_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::report_storage_data, 32)
                    .store_uint(query_id, 64)
                    .store_slice(sender_address)
                    .store_uint(now(), 32)
                    .store_ref(get_data())
                    .store_slice(in_msg_body);

        send_raw_message(msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    ;; owner's operations
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::owner_address));

    if (op == op::claim_rewards) {
        throw_unless(exc::out_of_gas, msg_value >= claim_rewards_required_gas(fwd_fee) + tons::jetton_transfer);
        throw_unless(exc::has_pending_request, storage::is_active);
        
        cell payload = begin_cell()
                            .store_uint(op::send_claimed_rewards, 32)
                            .store_uint(query_id, 64)
                            .store_slice(storage::owner_address)
                            .store_uint(storage::lock_period, 32)
                            .store_coins(storage::jetton_balance)
                            .store_dict(storage::rewards_dict)
                            .store_slice(in_msg_body)   ;; in_msg_body = HashmapE. jetton_address (MsgAddressStd) -> nothing (int1)
                        .end_cell();
    
                     
        send_cell_message(storage::staking_pool_address, 0, payload, mode::carry_remaining_gas);
        
        storage::is_active = false;
        save_data();

        ~strdump("stake_wallet: claim rewards");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }

    if (op == op::unstake_request) {
        throw_unless(exc::out_of_gas, msg_value >= unstake_request_required_gas(fwd_fee));
        throw_unless(exc::has_pending_request, storage::is_active);
        throw_unless(exc::hashmap_overflow, storage::requests_count < UNSTAKE_REQUESTS_MAX_COUNT);

        int jettons_to_unstake = in_msg_body~load_coins();
        in_msg_body.end_parse();

        send_update_request(0,  - jettons_to_unstake, 0, query_id, 0, mode::carry_remaining_gas);

        storage::jetton_balance -= jettons_to_unstake;
        storage::total_requested_jettons += jettons_to_unstake;
        throw_unless(exc::not_enough_jettons, storage::jetton_balance >= 0);

        (slice requested_jettons_slice, int success) = storage::unstake_requests.udict_get?(32, now());
        if (success) {
            jettons_to_unstake += requested_jettons_slice~load_coins();
        }
        else {
            storage::requests_count += 1;
        }
        storage::unstake_requests~udict_set_builder(32, now(), begin_cell().store_coins(jettons_to_unstake));

        save_data();

        ~strdump("stake_wallet: unstake_request");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }

    if (op == op::unstake_jettons) {
        throw_unless(exc::has_pending_request, storage::is_active);

        int jettons_to_unstake = in_msg_body~load_coins();
        int force_unstake = in_msg_body~load_uint(1);
        in_msg_body.end_parse();

        throw_unless(exc::out_of_gas, msg_value >= unstake_jettons_required_gas(fwd_fee) + force_unstake * storage::unstake_fee);
        throw_unless(exc::not_enough_jettons, jettons_to_unstake <= storage::total_requested_jettons + force_unstake * storage::jetton_balance);
        
        int jettons_to_send = 0;
        int forced_jettons = jettons_to_unstake;
        (int request_time, slice requested_jettons_slice, int success) = storage::unstake_requests.udict_get_preveq?(32, now() - storage::lock_period);
        while (success & forced_jettons) {
            int requested_jettons = requested_jettons_slice~load_coins();
            if (requested_jettons <= forced_jettons) {
                storage::unstake_requests~udict_delete?(32, request_time);
                (request_time, requested_jettons_slice, success) = storage::unstake_requests.udict_get_prev?(32, request_time);
                storage::requests_count -= 1;
            } else {
                storage::unstake_requests~udict_set_builder(32, request_time, begin_cell().store_coins(requested_jettons - forced_jettons));
                requested_jettons = forced_jettons;
            }
            forced_jettons -= requested_jettons;
            jettons_to_send += requested_jettons;
        }

        int commission = 0;
        if (forced_jettons) {
            commission = muldiv(forced_jettons, storage::unstake_commission, commission_devider);
            jettons_to_send += forced_jettons - commission;
        }

        (request_time, requested_jettons_slice, success) = storage::unstake_requests.udict_get_max?(32);
        while (forced_jettons > storage::jetton_balance) {
            int requested_jettons = requested_jettons_slice~load_coins();
            if (requested_jettons <= forced_jettons) {
                forced_jettons -= requested_jettons;
                storage::unstake_requests~udict_delete?(32, request_time);
                (request_time, requested_jettons_slice, success) = storage::unstake_requests.udict_get_prev?(32, request_time);
                storage::requests_count -= 1;
            } else {
                forced_jettons = 0;
                storage::unstake_requests~udict_set_builder(32, request_time, begin_cell().store_coins(requested_jettons - forced_jettons));
            }
        } 
        
        send_update_request(jettons_to_send, - forced_jettons, commission, query_id, 0, mode::carry_remaining_gas);
        
        storage::total_requested_jettons -= (jettons_to_unstake - forced_jettons);
        storage::jetton_balance -= forced_jettons;
        save_data();

        ~strdump("stake_wallet: unstake jettons");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }

    if (op == op::cancel_unstake_request) { 
        throw_unless(exc::out_of_gas, msg_value >= cancel_unstake_required_gas(fwd_fee));
        throw_unless(exc::has_pending_request, storage::is_active);

        int jettons_to_cancel = 0;
        cell requests_to_cancel = in_msg_body~load_dict();
        (int request_time, _, int success) = requests_to_cancel.udict_get_min?(32);
        while (success) {
            (slice requested_jettons_slice, int success2) = storage::unstake_requests~udict_delete_get?(32, request_time);
            if (success2) {
                jettons_to_cancel += requested_jettons_slice~load_coins();
                storage::requests_count -= 1;
            }
            (request_time, _, success) = requests_to_cancel.udict_get_next?(32, request_time);
        }

        
        send_update_request(0, jettons_to_cancel, 0, query_id, 0, mode::carry_remaining_gas); 
    
        storage::jetton_balance += jettons_to_cancel;
        storage::total_requested_jettons -= jettons_to_cancel;
        save_data();

        ~strdump("stake_wallet: cancel unstake");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }

    if (op == op::transfer_jetton) {
        throw_unless(exc::has_pending_request, storage::is_active);
        int jetton_amount = in_msg_body~load_coins();
        throw_unless(exc::not_enough_jettons, jetton_amount <= storage::jetton_balance);
        throw_unless(exc::less_than_min_deposit, jetton_amount >= storage::min_deposit);

        slice recipient = in_msg_body~load_msg_addr();
        ifnot (null?(storage::whitelist)) {
            (_, int success) = storage::whitelist.dict_get?(267, recipient);
            throw_unless(exc::user_not_in_wl, success);
        }
        slice response_address = in_msg_body~load_msg_addr();
        in_msg_body~skip_dict();
        int forward_ton_amount = in_msg_body~load_coins();
        throw_unless(exc::out_of_gas, msg_value >= jetton_transfer_required_gas(fwd_fee, forward_ton_amount));
                
        cell transfer_payload = begin_cell()  ;; Bits = 32 + 64 + 124 + 124 + 16 + 124 + 1 + 124 + 4 + 267 = 880
                                    .store_uint(op::receive_jettons, 32)
                                    .store_uint(query_id, 64)
                                    .store_coins(storage::min_deposit)
                                    .store_coins(storage::max_deposit)
                                    .store_uint(storage::unstake_commission, 16)
                                    .store_coins(storage::unstake_fee)
                                    .store_dict(storage::whitelist)
                                    .store_coins(jetton_amount)
                                    .store_coins(0)
                                    .store_slice(storage::owner_address)
                                    .store_ref(
                                        begin_cell()
                                            .store_slice(response_address)
                                            .store_coins(forward_ton_amount)
                                            .store_coins(storage::jetton_balance)
                                            .store_dict(storage::rewards_dict)
                                            .store_slice(in_msg_body)  ;; forward payload
                                        .end_cell()
                                    )
                                .end_cell();
        cell state_init = calculate_stake_wallet_state_init(storage::staking_pool_address, storage::minter_address, recipient, storage::lock_period, my_code());

        send_deploy_message(get_address_by_state_init(state_init), 0, state_init, transfer_payload, mode::carry_remaining_gas);
        
        storage::jetton_balance -= jetton_amount;
        storage::is_active = false;
        save_data();

        ~strdump("stake_wallet: transfer jettons");
        int t = gas_consumed();
        ~dump(gas_consumed());
        ~dump(get_compute_fee(WORKCHAIN, t));

        return ();
    }
    
    throw(0xffff);
}


(int, slice, slice, cell) get_wallet_data() method_id {
    load_data();
    return (
        storage::jetton_balance,
        storage::owner_address,
        storage::minter_address,
        my_code()
    );
}

(slice, slice, int, int, cell, cell, int, int, int, int, int, int, int, cell, slice) get_storage_data() method_id {
    load_data();
    return (
        storage::staking_pool_address,
        storage::owner_address,
        storage::lock_period,
        storage::jetton_balance,
        storage::rewards_dict,
        storage::unstake_requests,
        storage::requests_count,
        storage::total_requested_jettons,
        storage::is_active,
        storage::unstake_commission,
        storage::unstake_fee,
        storage::min_deposit,
        storage::max_deposit,
        storage::whitelist,
        storage::minter_address
    );
}
